@page "/streams/{streamName}"
@page "/streams/"
@page "/"

@using Speedruns.Web.Data
@inject StreamService StreamService
@inject IJSRuntime JsRuntime;

@if (_streams == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container">
        <div class="row">
            <div class="col s12 m12 l9 offset-l1">
                <div id="stream" class="video-container">
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        @foreach (var stream in _streams)
        {
            <RadzenCard class="col-md-4">
                <div class="row">
                    <div class="col-md-6">
                        <RadzenImage Path="https://lorempixel.com/100/190/nature/6" ></RadzenImage>
                    </div>
                    <div class="col-md-6">
                        <b>@stream.Username - @stream.Title</b>
                        <p>@stream.Description</p>
                    </div>
                </div>
            </RadzenCard>
        }
    </div>

}

@code {
    [Parameter]
    public string StreamName { get; set; }

    private List<Stream> _streams;

    protected override async Task OnInitializedAsync()
    {
        _streams = await StreamService.Get();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        if (string.IsNullOrEmpty(StreamName))
        {
            await ShowRandomStream();
        }
        else
        {
            var streamToShow = _streams.FirstOrDefault(stream => stream.Username == StreamName);
            if(streamToShow == null)
                await ShowRandomStream();
            else
                await streamToShow.PresentStream(JsRuntime, "stream");
        }
    }

    private async Task ShowRandomStream()
    {
        var randomNumber = new Random()
            .Next(0, _streams.Count);
        await _streams[randomNumber].PresentStream(JsRuntime, "stream");
    }
}
